# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'net/http'

Vagrant.require_version ">= 2.2.3"

# boxes for dc and crm dev VMs
box_name            = ENV['UPLF_VAGRANT_BOX_NAME']     || "SubPointSolutions/win-2016-datacenter-soe-latest" 
crm_box_name        = ENV['UPLF_VAGRANT_CRM_BOX_NAME'] || "SubPointSolutions/win-2016-datacenter-app-sql16-sp2" 

# other flags
linked_clone        = ENV['UPLF_VAGRANT_LINKED_CLONE'].to_s.empty? == false
machine_folder      = ENV['UPLF_VBMANAGE_MACHINEFOLDER'] || nil

# CRM relates settings: box, license key and local http-server address
crm_resource_name   = ENV['UPLF_CRM_RESOURCE_NAME']  || "ms-dynamics-crm90-server-en"
crm_license_key     = ENV['UPLF_CRM_LICENSE']        || "KKNV2-4YYK8-D8HWD-GDRMW-29YTW"
http_server_address = ENV['UPLF_BIN_REPO_HTTP_ADDR'] || 'http://10.0.2.2:8080'

puts "Using http-server on: #{http_server_address}"

# minimal CRM install
# incluenced by: 
# https://github.com/shurick81/vm-devops-starter
# https://github.com/shurick81/Dynamics365Configuration

# two vm topology: dc and client 
# - dc box gets promoted to minimal domain controller
# - client box gets SQL server completion and then setups minimal CRM instance

# CRM better have 6 Gb RAM, owervise our of RAM exception might be raised by the installed

vm_dc     = "dc"
vm_client = "crm"

# this configuration is driven by the ENV variables
# use the following variables to change default RAM/CPU allocation
# 
# UPLF_DC_MEMORY      / UPLF_DC_CPUS 
# UPLF_SP16LTS_MEMORY / UPLF_SP16LTS_CPUS 

# uplift helper for vagrant configurations
uplift = VagrantPlugins::Uplift::Config()

# network range where dc and other vms will be created
# by default 192.168.4.*, use as following or skip it
# be aware that two dc won't get along within the same network
# use different networks for different stacks or one stack at a time
uplift.set_network_range("192.168.16")

Vagrant.configure("2") do |config|
  
  # additional plugins to be used with this vagrant config
  config.vagrant.plugins = [
    "vagrant-reload",
    "vagrant-uplift"
  ]

  # domain controller box
  config.vm.define(vm_dc) do | vm_config |      

    # -- UPLIFT CONFIG START --
    # there should not be a need to modify core uplift configration
    # avoid making changes to it, add your own provision at the end

    vm_config.vm.box = box_name

    # standard config
    uplift.set_default_synced_folder(vm_dc, vm_config)
    uplift.set_2Gb(vm_dc, vm_config)
    uplift.set_hostname(vm_dc, vm_config, vm_dc)
    
    # always setup correct networking
    uplift.set_private_dc_network(vm_dc, vm_config)
    
    # uplift baseline
    if !uplift.has_checkpoint?(vm_dc, 'dsc-soe') 
      uplift.provision_win16_dsc_soe(vm_dc, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dsc-soe'
    end

    # uplift dc creation
    if !uplift.has_checkpoint?(vm_dc, 'dc-creation') 
      uplift.provision_dc16(vm_dc, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dc-creation'
    end

    if !uplift.has_checkpoint?(vm_dc, 'dsc-shortcuts') 
      uplift.provision_win16_dsc_shortcuts(vm_dc, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dsc-shortcuts'
    end

    # additional virtualbox tweaks
    vm_config.vm.provider "virtualbox" do |v|
      v.gui  = false
     
      v.cpus   = uplift.get_vm_cpus(vm_dc, 4)
      v.memory = uplift.get_vm_memory(vm_dc, 2 * 1024)

      v.customize ['modifyvm', :id, '--cpuexecutioncap', '100'] 
      v.customize ["modifyvm", :id, "--ioapic", "on"]

      v.linked_clone = linked_clone
    end

    # -- UPLIFT CONFIG END --
    # add your custom vagrant configuration here

    if !uplift.has_checkpoint?(vm_dc, 'crm-ps-modules') 
      vm_config.vm.provision "shell",
        name: "crm-ps-modules",
        path: "scripts-dc/crm-ps-modules.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: 'crm-ps-modules'
    end

    if !uplift.has_checkpoint?(vm_dc, "crm-domain-users") 
      vm_config.vm.provision "shell",
        name: "crm-domain-users",
        path: "scripts-dc/crm-domain-users.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-domain-users"
    end

  end  

  # dev box - sq; + crm with minimal web sites
  config.vm.define(vm_client) do | vm_config |   
  
    # -- UPLIFT CONFIG START --
    # there should not be a need to modify core uplift configration
    # avoid making changes to it, add your own provision at the end

    # box config
    vm_config.vm.box = crm_box_name
    vm_config.vm.box_check_update = false

    # uplift - base config
    uplift.set_default_synced_folder(vm_client, vm_config)
    uplift.set_4Gb(vm_client, vm_config)
    uplift.set_hostname(vm_client, vm_config, vm_client)   

    # uplift - network, base provision + dc join
    uplift.set_client_network(vm_client, vm_config, vm_client)
    # uplift.set_public_network(vm_client, vm_config, vm_client_public_ip)

    if !uplift.has_checkpoint?(vm_client, 'dsc-soe') 
      uplift.provision_win16_dsc_soe(vm_client, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dsc-soe'
    end

    if !uplift.has_checkpoint?(vm_client, 'dc-join') 
      uplift.provision_dc_join(vm_client, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dc-join'
    end

    if !uplift.has_checkpoint?(vm_client, 'dsc-shortcuts') 
      uplift.provision_win16_dsc_shortcuts(vm_client, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'dsc-shortcuts'
    end

    # complete sql image
    if !uplift.has_checkpoint?(vm_client, 'sql-complete-image') 
        uplift.provision_sql16_complete_image(vm_client, vm_config)
        vm_config.vm.provision :uplift_checkpoint, name: 'sql-complete-image'
    end

    if !uplift.has_checkpoint?(vm_client, 'sql-optimize') 
      #uplift.provision_sql16_optimize(vm_client, vm_config, max_memory: 6 * 1024)
      uplift.provision_sql16_optimize(vm_client, vm_config)
      vm_config.vm.provision :uplift_checkpoint, name: 'sql-optimize'
    end

    # virtualbox tuning
    vm_config.vm.provider "virtualbox" do |v|
      v.gui  = false
      
      v.cpus   = uplift.get_vm_cpus(vm_client, 4)
      v.memory = uplift.get_vm_memory(vm_client, 6 * 1024)

      v.customize ['modifyvm', :id, '--cpuexecutioncap', '100'] 
      v.customize ["modifyvm", :id, "--ioapic", "on"]

      v.linked_clone = linked_clone
    end

    # -- UPLIFT CONFIG END --

    # CRM specific provisoin

    # provision additional powershell modules
    if !uplift.has_checkpoint?(vm_client, "crm-ps-modules") 
      vm_config.vm.provision "shell",
        name: "crm-ps-modules",
        path: "scripts-crm/crm-ps-modules.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-ps-modules"
    end

    # cred-ssp setup
    if !uplift.has_checkpoint?(vm_client, "crm-cred-ssp") 
      vm_config.vm.provision "shell",
        name: "crm-cred-ssp",
        path: "scripts-crm/cred-ssp.ps1"

      vm_config.vm.provision :reload

      vm_config.vm.provision :uplift_checkpoint, name: "crm-cred-ssp"
    end

    # local admin setup
    if !uplift.has_checkpoint?(vm_client, "crm-local-admin-group") 
      vm_config.vm.provision "shell",
        name: "crm-local-admin-group",
        path: "scripts-crm/crm-domain-client-group.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-local-admin-group"
    end

    # self-signed certn
    if !uplift.has_checkpoint?(vm_client, "crm-ssl-self-signed-cert") 
      vm_config.vm.provision "shell",
        name: "crm-ssl-self-signed-cert",
        path: "scripts-crm/crm-ssl-self-signed-cert.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-ssl-self-signed-cert"
    end

    # sql rs config
    if !uplift.has_checkpoint?(vm_client, "sql-rs-config") 
      vm_config.vm.provision "shell",
        name: "sql-rs-config",
        path: "scripts-crm/sql-rs-config.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "sql-rs-config"
    end

    # crm sql users
    if !uplift.has_checkpoint?(vm_client, "crm-sql-accounts") 
      vm_config.vm.provision "shell",
        name: "crm-sql-accounts",
        path: "scripts-crm/crm-sql-accounts.dsc.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-sql-accounts"
    end

    # crm installation media
    if !uplift.has_checkpoint?(vm_client, "crm-install-media") 
      vm_config.vm.provision "shell",
        name: "crm-install-media",
        path: "scripts-crm/crm-dynamics-download.ps1",
        env: {
          "UPLF_CRM_RESOURCE_NAME" => crm_resource_name,
          "UPLF_HTTP_ADDR" => http_server_address
        }

      vm_config.vm.provision :uplift_checkpoint, name: "crm-install-media"
    end

    # crm install
    if !uplift.has_checkpoint?(vm_client, "crm-install-provision") 
      vm_config.vm.provision "shell",
        name: "crm-install-provision",
        path: "scripts-crm/crm-dynamics-provision.ps1",
        env: {
          "UPLF_CRM_RESOURCE_NAME" => crm_resource_name,
          "UPLF_HTTP_ADDR" => http_server_address,
          "UPLF_CRM_LICENCE_KEY" => crm_license_key
        }

      vm_config.vm.provision :uplift_checkpoint, name: "crm-install-provision"
    end

    # crm web sites
    if !uplift.has_checkpoint?(vm_client, "crm-default-webs") 
      vm_config.vm.provision "shell",
        name: "crm-default-webs",
        path: "scripts-crm/crm-dynamics-default-webs.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-default-webs"
    end

    # crm web shortcuts
    if !uplift.has_checkpoint?(vm_client, "crm-default-webs-shortcuts") 
      vm_config.vm.provision "shell",
        name: "crm-default-webs-shortcuts",
        path: "scripts-crm/crm-dynamics-default-webs-shortcuts.dsc.ps1"

      vm_config.vm.provision :uplift_checkpoint, name: "crm-default-webs-shortcuts"
    end
   
  end 
  
end